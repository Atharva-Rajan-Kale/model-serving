ARG PYTHON_VERSION=3.11.9

FROM --platform=linux/amd64 763104351884.dkr.ecr.us-west-2.amazonaws.com/pytorch-inference:2.5.1-cpu-py311-ubuntu22.04-sagemaker

# Specify accept-bind-to-port LABEL for inference pipelines to use SAGEMAKER_BIND_TO_PORT
# https://docs.aws.amazon.com/sagemaker/latest/dg/inference-pipeline-real-time.html
LABEL com.amazonaws.sagemaker.capabilities.accept-bind-to-port=true
# Specify multi-models LABEL to indicate container is capable of loading and serving multiple models concurrently
# https://docs.aws.amazon.com/sagemaker/latest/dg/build-multi-model-build-container.html
LABEL com.amazonaws.sagemaker.capabilities.multi-models=true

LABEL maintainer="Amazon AI"
LABEL dlc_major_version="1"

RUN apt-get update \
 && apt-get -y upgrade \
 && apt-get autoremove -y \
 && apt-get install tesseract-ocr wget git -y \
 && apt-get clean \
 && rm -rf /var/lib/apt/lists/*

ARG AUTOGLUON_VERSION=1.3.1

# Upgrading pip and installing/updating Python dependencies
RUN pip install --no-cache-dir -U --trusted-host pypi.org --trusted-host files.pythonhosted.org pip \
 && pip install --no-cache-dir -U wheel \
 && pip uninstall -y dataclasses \
 # Install AutoGluon, ensuring no vulnerable dependencies are left behind
 && pip install --no-cache-dir "datasets>=3.6.0" \
 && pip install --no-cache-dir -U autogluon==${AUTOGLUON_VERSION} \
 # FastAI, breaking changes from 2.7 to 2.8, maintaining same version for both training and inference to load model correctly
 && pip install --no-cache-dir "fastai>=2.8.0,<2.9.0" \
 && pip install --no-cache-dir "ninja<1.11.1.1"

# Explicitly remove torchserve to ensure MLflow is used instead
RUN pip uninstall -y torchserve torch-model-archiver torch-workflow-archiver || true \
 && apt-get remove -y torchserve || true \
 && rm -rf /usr/local/bin/torchserve /usr/local/bin/torch-model-archiver /usr/local/bin/torch-workflow-archiver

# Install MLflow and required dependencies
RUN pip install --no-cache-dir mlflow[extras] \
 && pip install --no-cache-dir cloudpickle

# Create model server directory
RUN mkdir -p /home/model-server
RUN mkdir -p /opt/ml/model

# Copy MLflow model files and entrypoint
COPY autogluon_model.py /opt/ml/autogluon_model.py
COPY mlflow-entrypoint.py /usr/local/bin/dockerd-entrypoint.py
COPY setup_mlflow_model.py /opt/ml/setup_mlflow_model.py
RUN chmod +x /usr/local/bin/dockerd-entrypoint.py

RUN HOME_DIR=/root \
 && curl -o ${HOME_DIR}/oss_compliance.zip https://aws-dlinfra-utilities.s3.amazonaws.com/oss_compliance.zip \
 && unzip -o ${HOME_DIR}/oss_compliance.zip -d ${HOME_DIR}/ \
 && cp ${HOME_DIR}/oss_compliance/test/testOSSCompliance /usr/local/bin/testOSSCompliance \
 && chmod +x /usr/local/bin/testOSSCompliance \
 && chmod +x ${HOME_DIR}/oss_compliance/generate_oss_compliance.sh \
 && ${HOME_DIR}/oss_compliance/generate_oss_compliance.sh ${HOME_DIR} python \
 && rm -rf ${HOME_DIR}/oss_compliance*

RUN curl -o /licenses-autogluon.txt https://autogluon.s3.us-west-2.amazonaws.com/licenses/THIRD-PARTY-LICENSES.txt

EXPOSE 5000
ENTRYPOINT ["python", "/usr/local/bin/dockerd-entrypoint.py"]
CMD ["serve"]